"""
Django settings for base project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from os.path import join, normpath, basename
from configparser import RawConfigParser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SITE_ROOT = os.path.dirname(BASE_DIR)

# Config File
CONFIG_FILE='/etc/config.ini'
if not os.path.isfile(CONFIG_FILE):
    CONFIG_FILE = os.path.join(BASE_DIR, 'etc', 'config.ini')


# ini config
config = RawConfigParser()
try:
    with open(CONFIG_FILE) as f:
        config.read(CONFIG_FILE)
except IOError:
    print(CONFIG_FILE, "does not exist!")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.get('secrets', 'KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.get('debug', 'DEBUG')

ALLOWED_HOSTS = []

#### SITE INFORMATION
SITE_ID = config.getint('info', 'SITE_ID')
SITE_NAME = basename(BASE_DIR)
ADMINS = tuple(config.items('error mail'))



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.postgres',
    'django_extensions',
    'rest_framework',
    'apps.authentication',
    'apps.base'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'

]

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config.get('database', 'DBENGINE'),
        'NAME': config.get('database', 'DBNAME'),
        'USER': config.get('database', 'DBUSER'),
        'OPTIONS': {
            'options': '-c search_path=base'
        },
        'PASSWORD': config.get('database', 'DBPWD'),
        'HOST': config.get('database', 'DBHOST', fallback='localhost'),
        'PORT': config.get('database', 'DBPORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = config.get('l18n', 'language_code')
LANGUAGE = config.get('l18n', 'language')
TIME_ZONE = config.get('l18n', 'TIME_ZONE')
USE_I18N = config.get('l18n', 'USE_I18N')
USE_L10N = config.get('l18n', 'USE_L10N')
USE_TZ = config.get('l18n', 'USE_TZ')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

AUTH_USER_MODEL = 'authentication.User'

# REST FRAMEWORK

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'apps.authentication.exceptions.core_exception_handler',
    'NON_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
 'DEFAULT_AUTHENTICATION_CLASSES': (
        #'rest_framework.authentication.BasicAuthentication',
        #'rest_framework.authentication.SessionAuthentication',
        'apps.authentication.backends.JWTAuthentication',
    ),
 'DEFAULT_PERMISSION_CLASSES': (
        #'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
    )
}
